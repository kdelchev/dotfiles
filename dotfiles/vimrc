"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/junegunn/dotfiles/blob/master/vimrc
" https://github.com/Eunix/dotfiles/blob/master/.vimrc
" https://github.com/keithpitt/dotfiles/blob/master/dots/vimrc
" https://github.com/PhilRunninger/my_vim_setup/blob/master/vimrc
" https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
" https://github.com/rudionrails/dotfiles/tree/master/vim
" https://github.com/RStankov/config_files/tree/master/dot/vim
" https://gist.github.com/layflags/3814756#file-vimrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible

set encoding=utf-8 nobomb

set nobackup      " no backup files
set nowritebackup " no backup file while editing
set noswapfile    " no swap files

set autoread      " read file if changed outside vim
set autowrite     " write buffers
set autowriteall  " write buffers

set list                           " show special characters :help listchars
set listchars=tab:▸·,eol:¬,trail:● " symbol settings for special characters
set backspace=indent,eol,start     " liberal backspacing in insert mode

" tabstop == softtabstop - work with tabs
" softtabstop == shiftwidth - work with spaces
set tabstop=2     " width of a tab character§
set softtabstop=2 " set the amount of space to be inserted
set shiftwidth=2  " set the amount of space to add/remove when indenting
set expandtab     " use spaces instead tab characters
set smarttab      " insert blanks in front of a line
set smartindent   " smart autoindent on new line
set shiftround    " round indent to multiple of shiftwidth

if has("autocmd")
  " :set filetype? /. ft?
  " :set filetype=xml

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  autocmd FileType text setlocal textwidth=80
  autocmd FileType markdown setlocal textwidth=100
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType sass setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType make setlocal ts=2 sts=2 sw=2 expandtab

  " Don't syntax highlight markdown because it's often wrong
  autocmd! FileType mkd setlocal syn=off
  autocmd! FileType *.slim set sw=2 sts=2 expandtab

  " *.md is markdown
  autocmd! BufNewFile,BufRead *.md setlocal ft=
  autocmd BufLeave,FocusLost * silent! wall

  "autocmd BufWritePre *.rb,*.js :call <SID>StripTrailingWhitespaces()

  " Set md to markdown, not module2
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown

  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Wrap Git commit messages wrapping and spell checking
  autocmd FileType gitcommit set spell tw=72
endif

set background=light
set hlsearch " highlight previous search
syntax sync fromstart " TODO: check this setting
syntax on    " switch syntax highlighting on, when the terminal has colors

if executable('ag')
  "let g:ackprg = 'ag --vimgrep'
  "let g:ackprg = 'ag --vimgrep --smart-case'
  cnoreabbrev ag Ack

  set grepprg=ag\ --nogroup\ --nocolor
endif

set autoindent  " copy indentation from current line when starting new line
set ignorecase smartcase " ignore case if all caps are the same
set incsearch   " show pattern as you type
set hidden      " allows buffers to be switched without saving

hi Search ctermbg=Yellow ctermfg=Black

set laststatus=2    " always show statusline
set ruler           " always show cursor position
set showmode        " display curent mode
set showcmd         " display incomplete commands
"set relativenumber  " show relative number (hybrid mode)
set number          " show line numbers

set wildmenu
set wildignore=.keep,coverage,node_modules,tmp
set nowrap                      " break by words
set showmatch                   " show matching brackets when hovering
set viminfo='25,\"50,n~/.vim/.viminfo
set splitright

set history=100
set ttyfast

set mouse=a
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8

set undofile                  " save undo's after file closes
set undodir=$HOME/.vim/undo   " where to save undo histories
set undolevels=1000           " how many undos
set undoreload=10000          " number of lines to save for undo
set clipboard=unnamed         " used by easyclip to specify which clipboard to use
set textwidth=120
set colorcolumn=+1
highlight ColorColumn ctermbg=gray "set to whatever you like
set cursorline                " highlight current line
set cursorcolumn              " highlight current column
set showtabline=2             " Always show tab bar at the top
set shell=zsh

" Turn folding off for real, hopefully
set foldmethod=manual
set nofoldenable

" Use the old vim regex engine (version 1, as opposed to version 2, which was
" introduced in Vim 7.3.969). The Ruby syntax highlighting is significantly
" slower with the new regex engine.
set re=1

" This should make vertical split resize depending on focus
"set winwidth=85
"set winminwidth=20
"set winheight=15
"set winminheight=5
set complete-=t
set matchtime=1
set timeoutlen=1000 ttimeoutlen=0

" vim optimizations - people say this is making vim fast
set lazyredraw
set ttyfast

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
    " https://github.com/junegunn/fzf.vim
    " Default fzf layout
    " - down / up / left / right
    let g:fzf_layout = { 'down': '~40%' }
    let g:fzf_files_options = '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
    " [Buffers] Jump to the existing window if possible
    let g:fzf_buffers_jump = 1
    " [[B]Commits] Customize the options used by 'git log':
    let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
    " [Tags] Command to generate tags file
    let g:fzf_tags_command = 'ctags -R'
    " Customize fzf colors to match your color scheme
    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

  " Tools
  Plug 'airblade/vim-gitgutter'
    " ]c - next hunk
    " [c - prev hunk
    " <leader>hs - stage hunk
    " <leader>hu - unstage hunk
    " <leader>hp - preview hunk changes
  Plug 'editorconfig/editorconfig-vim' " editor configuration
  Plug 'rizzatti/dash.vim'             " Dash.app
  Plug 'scrooloose/nerdtree'           " file and dir list
    let g:NERDTreeShowHidden = 1
    Plug 'Xuyuanp/nerdtree-git-plugin' " show git status in nerdtree
  Plug 'svermeulen/vim-easyclip'       " clipboard support
    " lots of mappings: https://github.com/svermeulen/vim-easyclip#default-key-mappings TODO
    Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'            " vim surround
    " cs and more mappings: https://github.com/tpope/vim-surround#surroundvim TODO
  Plug 'tpope/vim-dispatch'            " dispatch to shell
  Plug 'tpope/vim-eunuch'              " UNIX helpers
    " https://github.com/tpope/vim-eunuch#eunuchvim
  Plug 'nelstrom/vim-visual-star-search' " visual select & search
  Plug 'mileszs/ack.vim'
    " https://github.com/mileszs/ack.vim#usage
  Plug 'tyok/nerdtree-ack'
  Plug 'qpkorr/vim-bufkill'            " buffer manager without closing splits
  Plug 'tpope/vim-fugitive'            " illegal git wrapper
    " Nice stuff to stage code
    " https://github.com/tpope/vim-fugitive#screencasts
    Plug 'tpope/vim-rhubarb' " makes Gbrowse work
  Plug 'junegunn/vim-easy-align'
    " https://github.com/junegunn/vim-easy-align#quick-start-guide

  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-endwise'                " close tags in ruby
  Plug 'vim-airline/vim-airline'          " airline
    " https://github.com/vim-airline/vim-airline
    " :help airline
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#bufferline#enabled = 1
      let g:airline_theme = 'cool'
  Plug 'vim-airline/vim-airline-themes'   " theme for airline
  Plug 'vim-scripts/Gist.vim'             " vimscript for gist
  Plug 'vim-scripts/taglist.vim'          " tag list
  Plug 'janko-m/vim-test'                 " test launcher
  Plug 'w0rp/ale'                         " lint engine
    let g:ale_fixers = {
    \   'ruby': ['rails_best_practices', 'rubocop', 'ruby', 'brakeman', 'reek'],
    \}

    let g:airline#extensions#ale#enabled = 1
  Plug 'danchoi/ruby_bashrockets.vim'     " toggle hash style Bashrockets Hashrockets
    " C-j C-k to navigate between errors

  " tmux
  Plug 'christoomey/vim-tmux-navigator'   " C-hjkl navigation
  Plug 'melonmanchan/vim-tmux-resizer'    " M-hjkl resizing
  Plug 'keith/tmux.vim'                   " syntax highlight for tmux

  " Other
  Plug 'altercation/vim-colors-solarized'
    " ToggleBG
  Plug 'slim-template/vim-slim'           " syntax highlight for slim template
  Plug 'mtscout6/vim-cjsx'                " syntax highlight for cjsx
  Plug 'mxw/vim-jsx'                      " syntax highlight for react jsx
  Plug 'gabrielelana/vim-markdown'        " syntax highlight for markdown and support
  Plug 'kchmck/vim-coffee-script'         " syntax highlight for coffeescript and support
  Plug 'chrisbra/Colorizer'               " colors stuff
  Plug 'KabbAmine/vCoolor.vim'            " colors picker
  Plug 'pangloss/vim-javascript'          " syntax highlight for javascript
  Plug 'leafgarland/typescript-vim'       " syntax highlight for typescript
  Plug 'HerringtonDarkholme/yats.vim'     " more syntax highlighting on dom keywords
    " https://github.com/othree/yajs.vim
    " https://github.com/othree/es.next.syntax.vim
  " Plug 'flomotlik/vim-livereload'         " reload browser on save

  " Elixir
  " Plug 'elixir-lang/vim-elixir'
  " Plug 'mattreduce/vim-mix'

  " Go
  " Plug 'fatih/vim-go'

  " TODO
  Plug 'tpope/vim-unimpaired'
  " Plug 'terryma/vim-expand-region'
  " https://github.com/tpope/vim-commentary
  " https://github.com/tomtom/tcomment_vim
  " https://github.com/sheerun/vim-polyglot
  " https://github.com/tpope/vim-sleuth       - automatic identation
  " https://github.com/wellle/targets.vim     - additional text objects
call plug#end()

colorscheme solarized
call togglebg#map("<leader>c") " TODO: remove mapping

let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']

" make test commands execute using dispatch.vim
let test#runner_commands = ['Jasmine']
let test#strategy = 'dispatch'
let g:test#preserve_screen = 1 " TODO: check this is working
" TODO: add option to run suite with coverage
"let test#ruby#rspec#options = {
"  \ 'nearest': '--backtrace',
"  \ 'file':    '--format documentation',
"  \ 'suite':   '--tag ~slow',
"\}

" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 2



if executable('ag')
  let g:ackprg = 'ag --vimgrep'
  "let g:ag_lhandler="topleft lopen"
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"function! <SID>StripTrailingWhitespaces()
"    " Preparation: save last search, and cursor position.
"    let _s=@/
"    let l = line(".")
"    let c = col(".")
"    " Do the business:
"    %s/\s\+$//e
"    " Clean up: restore previous search history, and cursor position
"    let @/=_s
"    call cursor(l, c)
"endfunction

runtime macros/matchit.vim " % - go to matching element do..end

"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO RSPEC LET
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RemoveFancyCharacters COMMAND
" Remove smart quotes, etc.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RemoveFancyCharacters()
    let typo = {}
    let typo["“"] = '"'
    let typo["”"] = '"'
    let typo["‘"] = "'"
    let typo["’"] = "'"
    let typo["–"] = '--'
    let typo["—"] = '---'
    let typo["…"] = '...'
    :exe ":%s/".join(keys(typo), '\|').'/\=typo[submatch(0)]/ge'
endfunction
command! RemoveFancyCharacters :call RemoveFancyCharacters()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OpenChangedFiles COMMAND
" Open a split for each dirty file in git
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenChangedFiles()
  only " Close all windows, unless they're modified
  let status = system('git status -s | grep "^ \?\(M\|A\|UU\)" | sed "s/^.\{3\}//"')
  let filenames = split(status, "\n")
  exec "edit " . filenames[0]
  for filename in filenames[1:]
    exec "o " . filename
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()


" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
" :map j gg    " maps j -> qq
" :map Q j     " maps Q -> j -> gg
" :noremap W j " maps W -> j
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F2> :Files!<CR>
map <F3> :Ag!<CR>
map <F4> :Buffers!<CR>
map <F8> :%s/<C-r><C-w>//gc<Left><Left><Left>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Clear search highlighting
nmap <silent> <leader>, :nohlsearch<CR>

nnoremap <leader>' :NERDTreeToggle<cr>
nnoremap <leader>[ :bp<CR>
nnoremap <leader>] :bn<CR>
nnoremap <leader>? :NERDTreeFind<CR>

" Move smoothly over wrapped lines
nnoremap j gj
nnoremap k gk

" Spend hitting shift
nnoremap ; :

" Resize split with Alt-arrow keys
" iTerm2 Profile->key bindings, load xterm preset
" alt-left ^[^[[A - Up
" alt-left ^[^[[B - Down
" alt-left ^[^[[C - Right
" alt-left ^[^[[D - Left
"map <Esc>[3;9A <C-w>+
"map <Esc>[1;9B <C-w>-
"map <Esc>[1;9C <C-w>>
"map <Esc>[1;9D <C-w><

" Shortcuts for rails projects
map <leader>gv :Files app/views<cr>
map <leader>gc :Files app/controllers<cr>
map <leader>gm :Files app/models<cr>
map <leader>gh :Files app/helpers<cr>
map <leader>gl :Files lib<cr>
map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>

" Test mappings
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

" TODO: make this map working
"   If used now it gives side efects. When using the arrow keys in normal mode
"   it enters edit mode and write upcase letter.
"nnoremap <esc> :noh<return><esc>
"nmap <esc> :noh<CR><esc>

"nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<cr>
"nmap <F7> :TagbarToggle<CR>

" vim-autotag mappings
":tn  Move to next definition (:tnext)
":tp  Move to previous definition (:tprevious)
":ts  List all definitions (:tselect)
"^]   Jump to definition
"^t   Jump back from definition
"^W } Preview definition
"g]   See all definitions


" HARD MODE: Disable the arrow and Pg Up/Down keys
nmap <Left> <Nop>
nmap <Right> <Nop>
nmap <Up> <Nop>
nmap <Down> <Nop>

imap <Left> <Nop>
imap <Right> <Nop>
imap <Up> <Nop>
imap <Down> <Nop>

vmap <Left> <Nop>
vmap <Right> <Nop>
vmap <Up> <Nop>
vmap <Down> <Nop>

" Disable entering Ex mode with Q
"map Q <Nop>

" Disable visual mode too
map W <Nop>

" puts the caller
nnoremap <leader>wtf oputs "#" * 90<c-m>puts caller<c-m>puts "#" * 90<esc>
nnoremap <leader>who oputs "-" * 60 + " #{} " + "-" * 60<esc>
nnoremap <leader>d obinding.pry<esc>

" in-vim search results
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

"p method(:render).source_location
"p method(:render).super_method.source_location

" copy result to the system clipboard and echo the result
" the > prompt means the clipboard
" *f*ile *n*ame, ex. init.vim
map <Leader>fn :let @+ = expand("%:t") \| echo '> ' . @+<CR>
" *f*ile *p*ath, ex. /home/user/nvim/init.vim
map <Leader>fp :let @+ = expand("%:p") \| echo '> ' . @+<CR>
" copy file relative path with extension
map <Leader>yy :let @+ = expand("%:r") . '.' . expand("%:e") \| echo '> ' . @+<CR>
map <Leader>yl :let @+ = expand("%:r") . '.' . expand("%:e") . ":" . line(".") \| echo '> ' . @+. ":" . line(".")<CR>

map <Leader>r :redraw!<cr>

"highlight Cursor guifg=white guibg=black
"highlight iCursor guifg=white guibg=steelblue
"set guicursor=n-v-c:block-Cursor
"set guicursor+=i:ver100-iCursor
"set guicursor+=n-v-c:blinkon0
"set guicursor+=i:blinkwait10

" Center on current line when searching
nmap n nzz
nmap N Nzz
nmap <C-o> <C-o>zz
nmap <C-i> <C-i>zz
nmap gg ggzz

nmap <leader>tig :!tig %<CR>
nmap <leader>x :BD<CR>
nmap <leader>X :bd<CR>
map <C-n> 20zl
map <C-b> 20zh

map <leader>gb :Gblame<CR>
map <leader>go :Gbrowse master:%<CR>
map Q <Esc>
map <Leader><Left> 5<C-w><
map <Leader><Right> 5<C-w>>
map <Leader><Up> 5<C-w>-
map <Leader><Down> 5<C-w>+

au BufRead,BufNewFile * let b:start_time=localtime()
au CursorHold * call UpdateFile()
" only write if needed and update the start time after the save
function! UpdateFile()
  if ((localtime() - b:start_time) >= 2)
    update
    let b:start_time=localtime()
  endif
endfunction

au BufWritePre * let b:start_time=localtime()
