"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Some configurations are stealed from:
" https://github.com/jbe/.vim/blob/master/vimrc
" https://github.com/junegunn/dotfiles/blob/master/vimrc
" https://github.com/Eunix/dotfiles/blob/master/.vimrc
" https://github.com/keithpitt/dotfiles/blob/master/dots/vimrc
" https://github.com/PhilRunninger/my_vim_setup/blob/master/vimrc
" https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
" https://github.com/rudionrails/dotfiles/tree/master/vim
" https://github.com/RStankov/config_files/tree/master/dot/vim
" https://gist.github.com/layflags/3814756#file-vimrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
set encoding=utf-8 nobomb

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'

  Plug 'airblade/vim-gitgutter'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'elixir-lang/vim-elixir'
  Plug 'danchoi/ruby_bashrockets.vim'
  Plug 'flazz/vim-colorschemes'
  Plug 'fatih/vim-go'
  Plug 'gabrielelana/vim-markdown'
  Plug 'jeffkreeftmeijer/vim-numbertoggle'
  Plug 'kchmck/vim-coffee-script'
  Plug 'keith/tmux.vim'
  Plug 'mattreduce/vim-mix'
  Plug 'mtscout6/vim-cjsx'
  Plug 'mxw/vim-jsx'
  Plug 'scrooloose/nerdtree'
  Plug 'scrooloose/syntastic'
  Plug 'slim-template/vim-slim'
  Plug 'svermeulen/vim-easyclip'
  "Plug 'terryma/vim-multiple-cursors' " C-n (toggle relative line numbers collision)
  Plug 'Townk/vim-autoclose'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'vim-ruby/vim-ruby'
  Plug 'vim-scripts/Gist.vim'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'vim-scripts/taglist.vim'

  " ntpeters/vim-better-whitespace
  " bronson/vim-trailing-whitespace


  " TODO: check all the plugins below
  "Plug 'tpope/vim-markdown'
  "Plug 'tomtom/tcomment_vim'
  "Plug 'nanotech/jellybeans.vim' " dark color theme for vim
  "Plug 'majutsushi/tagbar'
  "Plug 'xolox/vim-easytags'
  "Plug 'sjl/gundo.vim'
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"function! <SID>StripTrailingWhitespaces()
"    " Preparation: save last search, and cursor position.
"    let _s=@/
"    let l = line(".")
"    let c = col(".")
"    " Do the business:
"    %s/\s\+$//e
"    " Clean up: restore previous search history, and cursor position
"    let @/=_s
"    call cursor(l, c)
"endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !clear
    :silent !echo $(date)
    " TODO: optionally run with bundle exec if Gemfile or .bundle dir found
    "exec ":!bundle exec rspec " . a:filename
    exec ":!rspec " . a:filename
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_spec_file = match(expand("%"), '_spec.rb$') != -1
    if in_spec_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
endfunction

" % - go to matching element do..end
runtime macros/matchit.vim
"packadd! matchit " Another way to add matching package

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nobackup      " no backup files
set nowritebackup " no backup file while editing
set noswapfile    " no swap files

set autoread      " read file if changed outside vim
set autowrite     " write buffers
set autowriteall  " write buffers

set list                           " show special characters :help listchars
set listchars=tab:▸·,eol:¬,trail:● " symbol settings for special characters
set backspace=indent,eol,start     " liberal backspacing in insert mode

" tabstop == softtabstop - work with tabs
" softtabstop == shiftwidth - work with spaces
set tabstop=2     " width of a tab character§
set softtabstop=2 " set the amount of space to be inserted
set shiftwidth=2  " set the amount of space to add/remove when indenting
set expandtab     " use spaces instead tab characters
set smarttab      " insert blanks in front of a line
set smartindent   " smart autoindent on new line
set shiftround    " round indent to multiple of shiftwidth
if has("autocmd")
  " :set filetype? /. ft?
  " :set filetype=xml

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  autocmd FileType text setlocal textwidth=78
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType sass setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType make setlocal ts=2 sts=2 sw=2 expandtab

  " Don't syntax highlight markdown because it's often wrong
  autocmd! FileType mkd setlocal syn=off
  autocmd! FileType *.slim set sw=2 sts=2 expandtab

  " *.md is markdown
  autocmd! BufNewFile,BufRead *.md setlocal ft=
  autocmd BufLeave,FocusLost * silent! wall

  " custom filetype syntax setting
  " autocmd BufNewFile,BufRead *.rss,*.atom setfiletype xml

  "autocmd BufWritePre *.rb,*.js :call <SID>StripTrailingWhitespaces()

  autocmd BufNewFile,BufReadPost *.md set filetype=markdown

  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
endif

if &t_Co >= 256 || has("gui_running")
  colorscheme zenburn
  "colorscheme busierbee
  "colorscheme busybee
  "colorscheme herald
  "colorscheme ingretu " +++ in dark
  "colorscheme inkpot " ++ in dark
  "colorscheme jellyx
  "colorscheme lucius
  "colorscheme obsidian " comments not visible
  "colorscheme shobogenzo
  "colorscheme synic " +++ in dark
  "colorscheme xoria256
endif

if &t_Co > 2 || has("gui_running")
  syntax sync fromstart " TODO: check this setting
  syntax on    " switch syntax highlighting on, when the terminal has colors
  set hlsearch " highlight previous search
endif

set autoindent  " copy indentation from current line when starting new line
set ignorecase smartcase " ignore case if all caps are the same
set incsearch   " show pattern as you type
set hidden      " allows buffers to be switched without saving

hi Search ctermbg=Yellow ctermfg=Black

set laststatus=2    " always show statusline
set ruler           " always show cursor position
set showmode        " display curent mode
set showcmd         " display incomplete commands
set relativenumber  " show relative number (hybrid mode)
set number          " show line numbers

set wildmenu
set wildignore=.keep,coverage,node_modules,tmp
set wrap lbr                    " break by words
set showmatch                   " show matching brackets when hovering
set viminfo='25,\"50,n~/.vim/.viminfo
set splitright

set history=100
set ttyfast

set mouse=a
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8

set undofile                  " save undo's after file closes
set undodir=$HOME/.vim/undo   " where to save undo histories
set undolevels=1000           " how many undos
set undoreload=10000          " number of lines to save for undo
set clipboard=unnamed         " used by easyclip to specify which clipboard to use
set textwidth=120
set colorcolumn=+1
set cursorline                " highlight current line
set showtabline=2             " Always show tab bar at the top


set shell=zsh

" keep more context when scrolling off the end of a buffer
"set scrolloff=3

" Turn folding off for real, hopefully
set foldmethod=manual
set nofoldenable

" Use the old vim regex engine (version 1, as opposed to version 2, which was
" introduced in Vim 7.3.969). The Ruby syntax highlighting is significantly
" slower with the new regex engine.
set re=1

" This should make vertical split resize depending on focus
"set winwidth=85
"set winminwidth=20
"set winheight=15
"set winminheight=5
set complete-=t
set matchtime=1
set timeoutlen=1000 ttimeoutlen=0
" https://github.com/scrooloose/nerdtree
" :help nerdtree
let g:NERDTreeShowHidden=1

" https://github.com/vim-airline/vim-airline
" :help airline
let g:airline#extensions#tabline#enabled=1
let g:airline_theme='badwolf'
let g:airline_powerline_fonts = 1

" https://github.com/junegunn/fzf.vim
" :help fzf
let g:fzf_layout = { 'down': '~40%' }
let g:fzf_files_options =
  \ '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
let g:fzf_buffers_jump = 1
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
let g:fzf_tags_command = 'ctags -R'

" https://github.com/scrooloose/syntastic
" Add all recommended settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
":set t_Co=256 " 256 colors
":set background=dark
":color grb256


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO RSPEC LET
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RemoveFancyCharacters COMMAND
" Remove smart quotes, etc.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RemoveFancyCharacters()
    let typo = {}
    let typo["“"] = '"'
    let typo["”"] = '"'
    let typo["‘"] = "'"
    let typo["’"] = "'"
    let typo["–"] = '--'
    let typo["—"] = '---'
    let typo["…"] = '...'
    :exe ":%s/".join(keys(typo), '\|').'/\=typo[submatch(0)]/ge'
endfunction
command! RemoveFancyCharacters :call RemoveFancyCharacters()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OpenChangedFiles COMMAND
" Open a split for each dirty file in git
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenChangedFiles()
  only " Close all windows, unless they're modified
  let status = system('git status -s | grep "^ \?\(M\|A\|UU\)" | sed "s/^.\{3\}//"')
  let filenames = split(status, "\n")
  exec "edit " . filenames[0]
  for filename in filenames[1:]
    exec "sp " . filename
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mapping
" :map j gg    " maps j -> qq
" :map Q j     " maps Q -> j -> gg
" :noremap W j " maps W -> j
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F2> :Files<CR>
map <F3> :Ag<CR>
map <F4> :Buffers<CR>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Clear search highlighting
nmap <silent> <leader>, :nohlsearch<CR>

nnoremap <leader>' :NERDTreeToggle<cr>
nnoremap <leader>[ :bp<CR>
nnoremap <leader>] :bn<CR>
nnoremap <leader>? :NERDTreeFind<CR>

" Move smoothly over wrapped lines
nnoremap j gj
nnoremap k gk

" Spend hitting shift
nnoremap ; :

" Move between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Resize split with Alt-arrow keys
" iTerm2 Profile->key bindings, load xterm preset
" alt-left ^[^[[A - Up
" alt-left ^[^[[B - Down
" alt-left ^[^[[C - Right
" alt-left ^[^[[D - Left
map <Esc>[1;9A <C-w>+
map <Esc>[1;9B <C-w>-
map <Esc>[1;9C <C-w>>
map <Esc>[1;9D <C-w><

" Shortcuts for rails projects
map <leader>gv :Files app/views<cr>
map <leader>gc :Files app/controllers<cr>
map <leader>gm :Files app/models<cr>
map <leader>gh :Files app/helpers<cr>
map <leader>gl :Files lib<cr>
map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>




" TODO
map <leader>t :call RunTestFile()<cr>
map <leader>s :call RunNearestTest()<cr>
map <leader>a :call RunTests('spec')<cr>

" TODO: make this map working
"   If used now it gives side efects. When using the arrow keys in normal mode
"   it enters edit mode and write upcase letter.
"nnoremap <esc> :noh<return><esc>
"nmap <esc> :noh<CR><esc>

"nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<cr>
"nmap <F7> :TagbarToggle<CR>

" vim-autotag mappings
":tn  Move to next definition (:tnext)
":tp  Move to previous definition (:tprevious)
":ts  List all definitions (:tselect)
"^]   Jump to definition
"^t   Jump back from definition
"^W } Preview definition
"g]   See all definitions


" HARD MODE: Disable the arrow and Pg Up/Down keys
nmap <Left> <Nop>
nmap <Right> <Nop>
nmap <Up> <Nop>
nmap <Down> <Nop>

imap <Left> <Nop>
imap <Right> <Nop>
imap <Up> <Nop>
imap <Down> <Nop>

vmap <Left> <Nop>
vmap <Right> <Nop>
vmap <Up> <Nop>
vmap <Down> <Nop>

" Disable entering Ex mode with Q
"map Q <Nop>

" Disable visual mode too
map W <Nop>



" puts the caller
nnoremap <leader>wtf oputs "#" * 90<c-m>puts caller<c-m>puts "#" * 90<esc>

"p method(:render).source_location
"p method(:render).super_method.source_location
