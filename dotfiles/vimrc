"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Some configurations are stealed from:
" https://github.com/jbe/.vim/blob/master/vimrc
" https://github.com/junegunn/dotfiles/blob/master/vimrc
" https://github.com/Eunix/dotfiles/blob/master/.vimrc
" https://github.com/keithpitt/dotfiles/blob/master/dots/vimrc
" https://github.com/PhilRunninger/my_vim_setup/blob/master/vimrc
" https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
set encoding=utf-8 nobomb

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'airblade/vim-gitgutter'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'flazz/vim-colorschemes'
  Plug 'scrooloose/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-surround'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'tpope/vim-repeat'
  Plug 'svermeulen/vim-easyclip'
  Plug 'tpope/vim-endwise'
  Plug 'gabrielelana/vim-markdown'
  Plug 'jeffkreeftmeijer/vim-numbertoggle'
  Plug 'elixir-lang/vim-elixir'
  "Plug 'scrooloose/syntastic'
  "Plug 'mattreduce/vim-mix'
  "Plug 'majutsushi/tagbar'
  "Plug 'ctags.vim'
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"function! <SID>StripTrailingWhitespaces()
"    " Preparation: save last search, and cursor position.
"    let _s=@/
"    let l = line(".")
"    let c = col(".")
"    " Do the business:
"    %s/\s\+$//e
"    " Clean up: restore previous search history, and cursor position
"    let @/=_s
"    call cursor(l, c)
"endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !clear
    :silent !echo $(date)
    " TODO: optionally run with bundle exec if Gemfile or .bundle dir found
    "exec ":!bundle exec rspec " . a:filename
    exec ":!rspec " . a:filename
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_spec_file = match(expand("%"), '_spec.rb$') != -1
    if in_spec_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
endfunction

" % - go to matching element do..end
runtime macros/matchit.vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" airline
let g:airline#extensions#tabline#enabled=1

" nerdtree
let g:NERDTreeShowHidden=1

" fzf
let g:fzf_layout = { 'down': '~40%' }
let g:fzf_files_options =
  \ '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
let g:fzf_buffers_jump = 1
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
let g:fzf_tags_command = 'ctags -R'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
syntax sync fromstart
colorscheme busierbee
"colorscheme busybee
"colorscheme herald
"colorscheme ingretu
"colorscheme inkpot
"colorscheme jellyx
"colorscheme lucius
"colorscheme obsidian
"colorscheme shobogenzo
"colorscheme synic
"colorscheme xoria256
"colorscheme zenburn

set nobackup      " no backup files
set nowritebackup " no backup file while editing
set noswapfile    " no swap files

set autoread      " read file if changed outside vim
set autowrite     " write buffers
set autowriteall  " write buffers

set list                           " show special characters :help listchars
set listchars=tab:▸·,eol:¬,trail:● " symbol settings for special characters
set backspace=indent,eol,start     " liberal backspacing in insert mode

" tabstop == softtabstop - work with tabs
" softtabstop == shiftwidth - work with spaces
set tabstop=2     " width of a tab character§
set softtabstop=2 " set the amount of space to be inserted
set shiftwidth=2  " set the amount of space to add/remove when indenting
set expandtab     " use spaces instead tab characters
set smarttab      " insert blanks in front of a line
set smartindent   " smart autoindent on new line
set shiftround    " round indent to multiple of shiftwidth
if has("autocmd")
  " :set filetype? /. ft?
  " :set filetype=xml

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  autocmd FileType text setlocal textwidth=78

  autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType eruby setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType haml setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType cucumber setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType sass setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab

  autocmd FileType python set sw=4 sts=4 expandtab

  autocmd FileType make setlocal ts=2 sts=2 sw=2 expandtab

  " *.md is markdown
  autocmd! BufNewFile,BufRead *.md setlocal ft=
  " Don't syntax highlight markdown because it's often wrong
  autocmd! FileType mkd setlocal syn=off

  autocmd! FileType *.slim set sw=2 sts=2 expandtab

  " custom filetype syntax setting
  " autocmd BufNewFile,BufRead *.rss,*.atom setfiletype xml

  autocmd BufWritePre *.rb,*.js :call <SID>StripTrailingWhitespaces()

  autocmd BufNewFile,BufReadPost *.md set filetype=markdown

  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
endif

set autoindent  " copy indentation from current line when starting new line
set ignorecase smartcase " makes search case sensitive only if capitalized character
set smartcase   " ignore case if only lower case letters in pattern
set incsearch   " show pattern as you type
set hlsearch    " highlight previous search
set hidden      " allows buffers to be switched without saving

hi Search ctermbg=Yellow ctermfg=Black

set laststatus=2    " always show statusline
set ruler           " always show cursor position
set showmode        " display curent mode
set showcmd         " display incomplete commands
set relativenumber  " show relative number (hybrid mode)
set number          " show line numbers

set wildmenu
set wildignore=.keep,coverage,node_modules,tmp
set wrap lbr                    " break by words
set showmatch                   " show matching brackets when hovering
set viminfo='25,\"50,n~/.vim/.viminfo
set splitright

set history=1000
set ttyfast

set mouse=a
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8

set undofile                  " save undo's after file closes
set undodir=$HOME/.vim/undo   " where to save undo histories
set undolevels=1000           " how many undos
set undoreload=10000          " number of lines to save for undo
set clipboard=unnamed         " used by easyclip to specify which clipboard to use
set textwidth=80
set colorcolumn=+1
set cursorline                " highlight current line
set showtabline=2             " Always show tab bar at the top


set shell=zsh

" keep more context when scrolling off the end of a buffer
set scrolloff=3

"setlocal foldmethod=indent

" Turn folding off for real, hopefully
set foldmethod=manual
set nofoldenable

" Use the old vim regex engine (version 1, as opposed to version 2, which was
" introduced in Vim 7.3.969). The Ruby syntax highlighting is significantly
" slower with the new regex engine.
set re=1

" This should make vertical split resize depending on focus
"set winwidth=85
"set winminwidth=20
"set winheight=15
"set winminheight=5

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
":set t_Co=256 " 256 colors
":set background=dark
":color grb256


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO RSPEC LET
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RemoveFancyCharacters COMMAND
" Remove smart quotes, etc.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RemoveFancyCharacters()
    let typo = {}
    let typo["“"] = '"'
    let typo["”"] = '"'
    let typo["‘"] = "'"
    let typo["’"] = "'"
    let typo["–"] = '--'
    let typo["—"] = '---'
    let typo["…"] = '...'
    :exe ":%s/".join(keys(typo), '\|').'/\=typo[submatch(0)]/ge'
endfunction
command! RemoveFancyCharacters :call RemoveFancyCharacters()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OpenChangedFiles COMMAND
" Open a split for each dirty file in git
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenChangedFiles()
  only " Close all windows, unless they're modified
  let status = system('git status -s | grep "^ \?\(M\|A\|UU\)" | sed "s/^.\{3\}//"')
  let filenames = split(status, "\n")
  exec "edit " . filenames[0]
  for filename in filenames[1:]
    exec "sp " . filename
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mapping
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :map j gg # maps j -> qq
" :map Q j # maps Q -> j -> gg
" :noremap W j # maps W -> j
" Move between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

map <leader>t :call RunTestFile()<cr>
map <leader>s :call RunNearestTest()<cr>
map <leader>a :call RunTests('spec')<cr>

" Shortcuts for rails projects
map <leader>gv :Files app/views<cr>
map <leader>gc :Files app/controllers<cr>
map <leader>gm :Files app/models<cr>
map <leader>gh :Files app/helpers<cr>
map <leader>gl :Files lib<cr>
map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>


" TODO: make this map working
"   If used now it gives side efects. When using the arrow keys in normal mode
"   it enters edit mode and write upcase letter.
"nnoremap <esc> :noh<return><esc>
"nmap <esc> :noh<CR><esc>

nnoremap <silent> <F2> :NERDTreeToggle<cr>
map <F3> :Ag<CR>
map <F4> :Buffers<CR>
"nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<cr>
map <F6> :Files<CR>


" HARD MODE: Disable the arrow and Pg Up/Down keys
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>

inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>

vnoremap <Left> <Nop>
vnoremap <Right> <Nop>
vnoremap <Up> <Nop>
vnoremap <Down> <Nop>
