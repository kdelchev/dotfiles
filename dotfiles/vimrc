"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
set encoding=utf-8 nobomb

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'airblade/vim-gitgutter'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'flazz/vim-colorschemes'
  Plug 'scrooloose/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-surround'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'tpope/vim-repeat'
  Plug 'svermeulen/vim-easyclip'
  Plug 'tpope/vim-endwise'
  Plug 'gabrielelana/vim-markdown'
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo
    exec ":!bundle exec rspec " . a:filename
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_spec_file = match(expand("%"), '_spec.rb$') != -1
    if in_spec_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
endfunction

" % - go to matching element do..end
runtime macros/matchit.vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled=1

let g:NERDTreeShowHidden=1
let g:NERDTreeShowBookmarks=1

let g:fzf_layout = { 'down': '~40%' }
let g:fzf_files_options =
  \ '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
let g:fzf_buffers_jump = 1
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
let g:fzf_tags_command = 'ctags -R'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
syntax sync fromstart
colorscheme Monokai

set nobackup      " no backup files
set nowritebackup " no backup file while editing
set noswapfile    " no swap files

set autoread      " read file if changed outside vim
set autowrite     " write buffers
set autowriteall  " write buffers

set list                           " show special characters :help listchars
set listchars=tab:▸·,eol:¬,trail:● " symbol settings for special characters
set backspace=indent,eol,start     " liberal backspacing in insert mode

" tabstop == softtabstop - work with tabs
" softtabstop == shiftwidth - work with spaces
set tabstop=2     " width of a tab character§
set softtabstop=2 " set the amount of space to be inserted
set shiftwidth=2  " set the amount of space to add/remove when indenting
set expandtab     " use spaces instead tab characters
set smarttab      " insert blanks in front of a line
set smartindent   " smart autoindent on new line
set shiftround    " round indent to multiple of shiftwidth
if has("autocmd")
  " :set filetype? /. ft?
  " :set filetype=xml
  filetype on
  autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab

  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType make setlocal ts=2 sts=2 sw=2 expandtab

  " custom filetype syntax setting
  " autocmd BufNewFile,BufRead *.rss,*.atom setfiletype xml

  autocmd BufWritePre *.rb,*.js :call <SID>StripTrailingWhitespaces()

  autocmd BufNewFile,BufReadPost *.md set filetype=markdown
  let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
endif

set autoindent  " copy indentation from current line when starting new line
set ignorecase  " ignore case in pattern
set smartcase   " ignore case if only lower case letters in pattern
set incsearch   " show pattern as you type
set hlsearch    " highlight previous search

set hidden  " allows buffers to be switched without saving

hi Search ctermbg=Yellow ctermfg=Black

set laststatus=2    " always show statusline
set ruler           " always show cursor position
set showmode        " display curent mode
set showcmd         " display incomplete commands
set number          " show line numbers

set wildmenu
set wildignore=.keep,coverage,node_modules,tmp
set wrap lbr                    " break by words
set showmatch                   " show matching brackets when hovering
set viminfo='25,\"50,n~/.vim/.viminfo
set splitright

set history=50
set ttyfast

set mouse=a
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8

set undofile                  " save undo's after file closes
set undodir=$HOME/.vim/undo   " where to save undo histories
set undolevels=1000           " how many undos
set undoreload=10000          " number of lines to save for undo
set clipboard=unnamed         " used by easyclip to specify which clipboard to use
set textwidth=80
set colorcolumn=+1
set cursorline


"setlocal foldmethod=indent


" This should make vertical split resize depending on focus
"set winwidth=85
"set winminwidth=20
"set winheight=15
"set winminheight=5

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mapping
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-d> :Files<CR>
map <C-b> :Buffers<CR>
map <C-f> :Ag<CR>

" Move between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

map <leader>t :call RunTestFile()<cr>
map <leader>s :call RunNearestTest()<cr>
map <leader>a :call RunTests('spec')<cr>

" Shortcuts for rails projects
map <leader>gv :Files app/views<cr>
map <leader>gc :Files app/controllers<cr>
map <leader>gm :Files app/models<cr>
map <leader>gh :Files app/helpers<cr>
map <leader>gl :Files lib<cr>
map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>

nmap <silent> <f2> :NERDTreeToggle<cr>

nnoremap <silent> <Leader>ag :Ag <C-R><C-W><cr>
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<cr>
" TODO: make this map working
"   If used now it gives side efects. When using the arrow keys in normal mode
"   it enters edit mode and write upcase letter.
"nnoremap <esc> :noh<return><esc>
