export EDITOR=vim
export BUNDLE_PATH=.bundle
export FZF_DEFAULT_COMMAND='fd --hidden --type f'
export DISABLE_SPRING=1
export HOMEBREW_NO_AUTO_UPDATE=1

[[ -d ~/bin ]] && export PATH=~/bin:$PATH
[[ -d /usr/local/sbin ]] && export PATH="/usr/local/sbin:$PATH"
[[ -d $HOME/.rbenv/bin ]] && export PATH="$HOME/.rbenv/bin:$PATH"

# Load rbenv automatically by appending the following to ~/.zshrc:
eval "$(rbenv init -)"

#[[ -r $ZSH/oh-my-zsh.sh ]] && source $ZSH/oh-my-zsh.sh
[[ -r ~/.zsh_profile ]] && source ~/.zsh_profile
[[ -r ~/bin/tmuxinator.zsh ]] && source ~/bin/tmuxinator.zsh
[[ -r ~/.my-functions.sh ]] && source ~/.my-functions.sh

# https://github.com/jonas/tig/issues/214
#stty dsusp undef

alias a='alias'
a wake-nas='wakeonlan 00:11:32:E1:CC:6B'
a cag="clear && ag"
a nospring='spring stop && DISABLE_SPRING=1 &&'
a db='bin/rails db -p'
a db_migrate='rake db:migrate db:test:prepare'
a cpwd='pwd | pbcopy'
a gpf='gp --force-with-lease'

a gst="scmpuff_status"
a gbi="git branch | fzf | sed 's+remotes/origin/++g' | xargs git checkout"
a gbo="git branch --all | fzf | sed 's+remotes/origin/++g' | xargs git checkout"
a gbx="git branch | fzf | sed 's+remotes/origin/++g' | xargs git branch -D"
a gbds='git branch -D $(git branch | grep -E squash_ | sed "s/ //g")'
a gp="ppr | git push"
a oppr="open $(ppr)"
a tig-reflog="git reflog --pretty=raw | tig --pretty=raw"
a gfix="gc --fixup"
a reset-test-db="bin/rails db:environment:set RAILS_ENV=test db:drop db:create db:structure:load db:test:prepare"
a down="youtube-dl --extract-audio --audio-format mp3"
a wip="ga . && gcmsg 'WIP' -n"

alias kubedemo='kubectl --kubeconfig=/Users/kdelchev/.kube/demo_cluster.yml'
alias kubestaging='kubectl --kubeconfig=/Users/kdelchev/.kube/staging_cluster.yml'
alias kubeproduction='kubectl --kubeconfig=/Users/kdelchev/.kube/production_cluster.yml'
alias kubeinfrastructure='kubectl --kubeconfig=/Users/kdelchev/.kube/infrastructure_cluster.yml'

# pyenv stuff

export PATH="~/.pyenv/shims:${PATH}"
export PYENV_SHELL=zsh
command pyenv rehash 2>/dev/null
pyenv() {
  local command
  command="${1:-}"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  rehash|shell)
    eval "$(pyenv "sh-$command" "$@")";;
  *)
    command pyenv "$command" "$@";;
  esac
}
